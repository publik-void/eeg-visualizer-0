* ~eeg-visualizer-0~

A real-time visualizer for EEG data.

Main use case, currently: Receive EEG data via
[[https://labstreaminglayer.org][LSL]] and visualize, e.g. for neurofeedback.

This should be considered an unfinished toy project at this stage.

** Screenshots

#+CAPTION: Short-time magnitude spectrum of a white noise testing signal highpassed at 2Hz
[[./aux/img/screenshot-client-visualizer-short-time-spectrum-0.png]]

#+CAPTION: Time series graphs for an 8-channel white noise testing signal
[[./aux/img/screenshot-client-visualizer-time-series-0.png]]

** Documentation

The binary incorporates several submodes that can be accessed via a subcommand
tree. E.g. to run the spectrum analyzer client, use the following command:
#+begin_src sh
  eeg-visualizer client visualizer short-time-spectrum
#+end_src

Each submode comes with its own ~help~ subcommand to print a usage message that
documents all further submodes, flags and options. Running ~eeg-visualizer help~
prints the top-level usage message, so you can go from there.

** Dependencies

- [[https://github.com/sccn/liblsl][liblsl]]
- [[https://www.fftw.org][FFTW]]
- [[https://www.sfml-dev.org][SFML]]

Plus [[https://cmake.org][CMake]] and optionally
[[https://ninja-build.org][Ninja]] for building.

** Build instructions

Building on Windows should be possible, but has not been tested as of yet.

For *nix:
#+begin_src sh
  mkdir -p build; cd build
  cmake ..
  make
#+end_src

Debug build for development:
#+begin_src sh
  mkdir -p build; cd build
  cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug
  cd ..
  ninja -C build
#+end_src

A [[file:aux/guix/eeg-visualizer-0.scm][package definition]] for
[[https://guix.gnu.org][Guix]] is also included.

** Silencing LSL info messages

By default, the LSL library prints info messages e.g. when connecting to the
network. This can be configured via a configuration file, which can be created
as follows:

#+begin_src sh
mkdir -p $HOME/lsl_api && printf "[log]\nlevel = -2" > $HOME/lsl_api/lsl_api.cfg
#+end_src

Caution: If a configuration file already exists at ~$HOME/lsl_api~, it will be
overwritten by the above command. There are multiple possible locations for LSL
configuration files. It is recommended to use the same configuration on all
servers and clients on a network. Also see the [[https://labstreaminglayer.readthedocs.io/info/lslapicfg.html?highlight=log#configuration-file-locations][LSL documentation]].
